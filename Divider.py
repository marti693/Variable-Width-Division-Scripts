import math


def buildDivider(width, method):
    if(method == "test"):
        w = str(width)
        w1 = str(width-1)
        f = open("C:/Users/natha/Documents/QuartusFiles/Trireme/divider.v", "w")
        f.write("module " + method + w + " (input clk, input rst, input start, output reg done,"
                                         " input [" + w1 + ":0]divisor, input ["+w1+":0]dividend, "
                                         "output reg ["+w1+":0]quotient, output reg ["+w1+":0]remainder);\n\n")
        f.write("reg [1:0] S, NS;\n")
        f.write("parameter init = 2'd0, div = 2'd1, d = 2'd2;\n\n")

        f.write("always @(posedge clk, posedge rst)\n")
        f.write("begin\n")
        f.write("   if (rst == 1'b1)\n")
        f.write("   begin\n")
        f.write("       S <= init;\n")
        f.write("   end\n")
        f.write("   else\n")
        f.write("   begin\n")
        f.write("       S <= NS;\n")
        f.write("   end\n")
        f.write("end\n\n")

        f.write("always @(*)\n")
        f.write("begin\n")
        f.write("   case(S)\n")
        f.write("       init: begin\n")
        f.write("           if(start == 1'b1) begin NS = div; end\n")
        f.write("           else begin NS = init; end\n")
        f.write("       end\n")
        f.write("       div: begin\n")
        f.write("           NS = d;\n")
        f.write("       end\n")
        f.write("       d: begin\n")
        f.write("           NS = init;\n")
        f.write("       end\n")
        f.write("   endcase\n")
        f.write("end\n\n")

        f.write("always @(posedge clk, posedge rst)\n")
        f.write("begin\n")
        f.write("   if (rst == 1'b1)\n")
        f.write("   begin\n")
        f.write("       quotient <= " + w +"'d0;\n")
        f.write("       remainder <= " + w + "'d0;\n")
        f.write("   end\n")
        f.write("   else\n")
        f.write("   begin\n")
        f.write("   case(S)\n")
        f.write("       init: begin\n")
        f.write("           quotient <= " + w +"'d0;\n")
        f.write("           remainder <= " + w + "'d0;\n")
        f.write("       end\n")
        f.write("       div: begin\n")
        f.write("           quotient <= dividend / divisor;\n")
        f.write("           remainder <= dividend % divisor;\n")
        f.write("       end\n")
        f.write("       d: begin\n")
        f.write("           done <= 1'b1;\n")
        f.write("       end\n")
        f.write("   endcase\n")
        f.write("   end\n")
        f.write("end\n")
        f.write("endmodule\n")
        f.write
        f.close()



    if(method == "non_restoring"):
        w = str(width)
        w1 = str(width - 1)
        w2 = str(width-2)
        w3 = str(math.floor(math.log(width,2))+1)
        w4 = str(math.floor(math.log(width, 2)) + 2)
        f = open("C:/Users/natha/Documents/QuartusFiles/Trireme/divider.v", "w")
        f.write("module " + method + w + " (input clk, input rst, input start, output reg done,"
                                         " input [" + w1 + ":0]divisor, input [" + w1 + ":0]dividend, "
                                                                                        "output reg [" + w1 + ":0]quotient, output reg [" + w1 + ":0]remainder);\n\n")
        f.write("reg [1:0] S, NS;\n")
        f.write("parameter init = 2'd0, div = 2'd1, d = 2'd2;\n\n")

        f.write("reg[" + w3 + ":0]i;\n")
        f.write("wire[" + w1 + ":0]n_divisor;\n")
        f.write("assign n_divisor = -divisor;\n")
        f.write("reg[" + w1 + ":0]remainder_r;\n")
        f.write("reg[" + w1 + ":0]quotient_r;\n")

        f.write("always @(posedge clk, posedge rst)\n")
        f.write("begin\n")
        f.write("   if (rst == 1'b1)\n")
        f.write("   begin\n")
        f.write("       S <= init;\n")
        f.write("   end\n")
        f.write("   else\n")
        f.write("   begin\n")
        f.write("       S <= NS;\n")
        f.write("   end\n")
        f.write("end\n\n")

        f.write("always @(*)\n")
        f.write("begin\n")
        f.write("   case(S)\n")
        f.write("       init: begin\n")
        f.write("           if(start == 1'b1) begin NS = div; end\n")
        f.write("           else begin NS = init; end\n")
        f.write("       end\n")
        f.write("       div: begin\n")
        f.write("         if (i == " + w4 + "'d0)\n")
        f.write("           NS = d;\n")
        f.write("         else\n")
        f.write("           NS = div;\n")
        f.write("       end\n")
        f.write("       d: begin\n")
        f.write("           NS = init;\n")
        f.write("       end\n")
        f.write("   endcase\n")
        f.write("end\n\n")


        f.write("always @ ( * )\n")
        f.write("begin\n")
        f.write("  remainder_r = {remainder[" + w2 + ":0], quotient[" + w1 + "]};\n")
        f.write("  quotient_r = {quotient[" + w2 + ":0], ~remainder[" + w1 + "]};\n")
        f.write("end\n\n")

        f.write("always @(posedge clk, posedge rst)\n")
        f.write("begin\n")
        f.write("   if (rst == 1'b1)\n")
        f.write("   begin\n")
        f.write("       quotient <= " + w + "'d0;\n")
        f.write("       remainder <= " + w + "'d0;\n")
        f.write("       i <= " + w4 + "'d0;\n")
        f.write("       done <= 1'b0;\n")
        f.write("   end\n")
        f.write("   else\n")
        f.write("   begin\n")
        f.write("   case(S)\n")
        f.write("       init: begin\n")
        f.write("           quotient <= dividend;\n")
        f.write("           remainder <= " + w + "'d0;\n")
        f.write("           i <= " + w4 + "'d" + w + ";\n")
        f.write("       end\n")
        f.write("       div: begin\n")
        f.write("           if (i > " + w4 + "'d0) begin\n")
        f.write("             remainder <= remainder_r + (remainder[" + w1 + "] == 1'b1 ? divisor : n_divisor);\n")
        f.write("           end\n")
        f.write("           quotient <= quotient_r;\n")
        f.write("           i <= i - 1'd1;\n")
        f.write("       end\n")
        f.write("       d: begin\n")
        f.write("           remainder <= remainder + (remainder[" + w1 + "] == 1'b1 ? divisor : " + w + "'d0);\n")
        f.write("           done <= 1'b1;\n")
        f.write("       end\n")
        f.write("   endcase\n")
        f.write("   end\n")
        f.write("end\n")
        f.write("endmodule\n")
        f.write
        f.close()

def edit_Testbench(width):
    with open('C:/Users/natha/Documents/QuartusFiles/Trireme/tb_single_cycle_BRAM_top_gcd.v', 'r') as file:
        lines = file.readlines()
        lines[39] = "parameter divider_width    = " + str(width-1) + ";\n"
    with open('C:/Users/natha/Documents/QuartusFiles/Trireme/tb_single_cycle_BRAM_top_gcd.v', 'w') as file:
        file.writelines(lines)
    with open('C:/Users/natha/Documents/QuartusFiles/Trireme/single_cycle_BRAM_top.v', 'r') as file:
        lines = file.readlines()
        #print(lines[23])
        lines[23] = "parameter divider_width      = " + str(width-1) + ",\n"
    with open('C:/Users/natha/Documents/QuartusFiles/Trireme/single_cycle_BRAM_top.v', 'w') as file:
        file.writelines(lines)
